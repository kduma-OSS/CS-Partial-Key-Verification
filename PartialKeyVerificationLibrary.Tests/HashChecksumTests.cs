using Microsoft.VisualStudio.TestTools.UnitTesting;
using PartialKeyVerificationLibrary.Verificator.Checksum;
using PartialKeyVerificationLibrary.Verificator.Hash;
using System.Collections.Generic;

namespace PartialKeyVerificationLibrary.Tests
{
    [TestClass]
    public class HashChecksumTests
    {
        static readonly byte[][] TestData = new byte[][] {
            new byte[] { 0x9E, 0x02, 0xF5, 0xAD, 0xF2, 0x47, 0x3C, 0x14, 0x57, 0xFD, 0x6B, 0xB7, 0x5B, 0x3C, 0x01, 0x7E, 0x32, 0x7E },
            new byte[] { 0x9C, 0x9F, 0x34, 0x23, 0xD1, 0x9F, 0x1A, 0x22, 0xD1, 0xD8, 0xC3, 0x7C, 0xF0, 0x88, 0xD8, 0x9E, 0xB6, 0x08, 0x40, 0xD3, 0xCA, 0x48, 0x80, 0xEB, 0xFB, 0x82, 0x7B, 0xF1, 0x8E, 0x6A, 0xF2, 0x1B, 0x36, 0x1C, 0xC1, 0x3F, 0x69, 0xDF, 0x23, 0x0E, 0xD8, 0x24, 0x6B, 0x3C, 0x93, 0x81, 0x7A, 0x2E, 0x82, 0x9D, 0x4B, 0x75, 0xF2, 0xAB, 0x8D, 0x53, 0x1F, 0x49, 0x28, 0x4F, 0x24, 0x28, 0x94, 0x66, 0xE5, 0xA8, 0x45, 0xD4, 0xC7, 0x98, 0x35, 0xD6, 0xE4, 0x32, 0xFB, 0xA6, 0xDD, 0x44, 0x57, 0x7A, 0x07, 0x4C, 0x6F, 0xF0, 0x1F, 0x7C, 0x29, 0x8B, 0x8E, 0x6D, 0x20, 0x20 },
            new byte[] { 0xD4, 0xE9, 0xAF, 0x8F, 0x04, 0x56, 0xEB, 0x3B, 0xA6, 0x67, 0xEA, 0x68, 0x74, 0x91, 0xC0, 0xAF, 0xE7, 0x76, 0xDB, 0xF1, 0xAD, 0x47, 0xD7, 0xB9, 0xA3, 0x47, 0x68, 0x7E, 0xBA, 0x45, 0x5A, 0x78, 0x14, 0x1F, 0x0F, 0x48, 0x4C, 0x16, 0xD8, 0xED, 0x6B, 0x3F, 0x60, 0xE5, 0x85, 0x88, 0xAA, 0xEB, 0x69, 0xDB, 0xA7, 0xF6, 0x45, 0x2F, 0x09, 0x8C, 0x12, 0xF5, 0xEC, 0xBD, 0xED, 0x6C, 0x80, 0x61, 0x0D, 0x71, 0x53, 0x54, 0x81, 0x77, 0x63, 0xD0, 0x9E, 0xED, 0x85, 0x6E, 0xE7, 0xF2, 0x34, 0x1B, 0x9D, 0x7C, 0x15, 0xDF, 0x9D, 0x63, 0x33, 0xE5, 0x16, 0x83, 0x36, 0x56, 0x2A, 0x1A, 0x00, 0xFE, 0xBE, 0xFE, 0xD8, 0x13, 0x34, 0x55, 0x6A, 0xF1, 0x77, 0xD6, 0x58, 0x58, 0xA9, 0x9B, 0xA5, 0x20, 0xC0, 0xD0, 0x20, 0x70, 0x56, 0xA0, 0xC4, 0xA9, 0x3E, 0x6E, 0x3E, 0xFE, 0x41, 0x0D, 0xA6, 0x83, 0xED, 0x87, 0xAF, 0xE8, 0x1A, 0x21, 0xE6, 0x47, 0x12, 0x24, 0x68, 0xC7, 0x0A, 0xDB, 0x3C, 0x7A, 0xDD, 0x15, 0x96, 0x59, 0xFA, 0x8F, 0xA7, 0x1D, 0x3A, 0x2E, 0xD4, 0xC6, 0x16, 0x6C, 0xAF, 0x6A, 0x30, 0xD5, 0x6B, 0x22, 0xEC, 0xBD, 0x05, 0x9F, 0xEA, 0xD8, 0x5E, 0x32, 0x38, 0xFC, 0x9F, 0x63, 0x32, 0xC3, 0x20, 0x2B, 0x76, 0x4D, 0x88, 0x5D, 0xDF, 0x91, 0xAD, 0xEB, 0x4C, 0x20, 0x30, 0xA5, 0x75, 0xFE, 0x97, 0x35, 0x70, 0x1A, 0x8E, 0x20, 0x0F, 0xF6, 0x6F, 0x22, 0x30, 0x75, 0xE5, 0x3D, 0x8E, 0x71, 0x93, 0x53, 0x4B, 0x83, 0xF3, 0xE3, 0x4C, 0x0D, 0x42, 0x5A, 0x0F, 0x1A, 0x52, 0xC9, 0xA7, 0xB8, 0xBC, 0x3A, 0x65, 0x6A, 0xF3, 0x18, 0x34, 0xFF, 0x1B, 0x80, 0xDD, 0x66, 0x2D, 0x69, 0xAC, 0x6F, 0x5C, 0xDA, 0x8C, 0xDD, 0x5A, 0xF1, 0x0A, 0xB4, 0xE8, 0x62, 0xD7, 0x34 },
            new byte[] { 0xF5, 0xA3, 0xA5, 0x7A, 0x78, 0xB8, 0xAA, 0xD8, 0x24, 0x7E, 0x7B, 0x1E, 0x4B, 0x67, 0x73, 0x05, 0xE6, 0xE0, 0xD9, 0xAE, 0xA0, 0xBD, 0x78, 0x3D, 0xCA, 0x5E, 0xCB, 0x2F, 0xB1, 0x81, 0x90, 0x40, 0x00, 0xEF, 0x25, 0xDC, 0x38, 0xEC, 0xB4, 0xB0, 0x01, 0x97, 0x38, 0x5C, 0x10, 0xBE, 0x0E, 0x8A, 0x97, 0xAE, 0x02, 0x82, 0xFD, 0x85, 0x70, 0x38, 0x2B, 0x68, 0xAF, 0x19, 0xED, 0x7B, 0x26, 0xA3, 0xED, 0x3B, 0x1E, 0x5C, 0x41, 0x96, 0xCD, 0xFA, 0x2B, 0x28, 0xAD, 0x08, 0x84, 0x1B, 0x2C, 0x0C, 0x50, 0x41, 0x97, 0x03, 0x7F, 0x0D, 0x42, 0x7B, 0x7E, 0xED, 0xB0, 0xCF, 0x3C, 0x9B, 0xC3, 0x86, 0x71, 0x94, 0x6E, 0xD5, 0xA0, 0xB1, 0x48, 0x00, 0xE1, 0x08, 0x57, 0xD5, 0xD7, 0x68, 0xB3, 0x10, 0x3B, 0xA3, 0xC9, 0xAC, 0xE3, 0x23, 0x24, 0xDF, 0xF8, 0xA2, 0xDE, 0x54, 0xE6, 0xFD, 0xBD, 0x90, 0x65, 0x27, 0x97, 0xF0, 0xAC, 0x57, 0x6B, 0x9E, 0xF8, 0x97, 0x21, 0x77, 0xB6, 0x6D, 0xA3, 0x16, 0x39, 0xA0, 0x93, 0x99, 0xD1, 0x17, 0xA2, 0x4E, 0x70, 0x8F, 0xDD, 0xFD, 0xD2, 0xF3, 0x1A, 0xE3, 0x4A, 0xC7, 0x70, 0xB0, 0xD0, 0xC3, 0x63, 0xE4, 0x37, 0x2A, 0xB3, 0x4C, 0x01, 0xAC, 0x29, 0x8A, 0xFF, 0xC8, 0x1B, 0x45, 0x69, 0x24, 0xBE, 0x4D, 0x84, 0x49, 0x7F, 0x1D, 0x79, 0x6E, 0xCB, 0x05, 0x7C, 0x3E, 0x2C, 0xEF, 0xFD, 0xF2, 0x45, 0x75, 0x3C, 0xAF, 0x61, 0xA6, 0x63, 0x56, 0x4C, 0xC3, 0x66, 0x52, 0xFE, 0x0A, 0xD8, 0xD4, 0x79, 0x26, 0x08, 0x22, 0x2C, 0x87, 0x44, 0x46, 0x6A, 0xC9, 0x5E },
            new byte[] { 0xCF, 0xC3, 0x80, 0x39 },
            new byte[] { 0x0C, 0x82, 0xA5, 0x08, 0xBA, 0xC2, 0x17, 0xE9, 0x2D, 0xFC, 0xBB, 0xB7, 0x27, 0x6F, 0xC1, 0x2C, 0xA7, 0xC4, 0x05, 0xE6, 0xDA, 0xC6, 0xBE, 0x31, 0xF6, 0x44, 0x98, 0x48, 0xB5, 0x86, 0x89, 0x43, 0x2C, 0xC5, 0xF2, 0x88, 0x33, 0xCB, 0xBF, 0x64, 0xF0, 0x38, 0xFE, 0x8A, 0x88, 0x8F, 0x43, 0x59, 0x9D, 0x81, 0x28, 0xFF, 0x7A, 0x52, 0xB2, 0x45, 0xC3, 0x73, 0x12, 0x76, 0x29, 0xCF, 0x33, 0xA7, 0x72, 0x78, 0x8A, 0x62, 0x7D, 0x38, 0xF9, 0xDB, 0x04, 0xA1, 0xF6, 0xA2, 0xC8, 0x34, 0xA9, 0x67, 0x00, 0x3E, 0xAA, 0x34, 0x5E, 0x8A, 0xC8, 0xD9, 0x12, 0xAC, 0xC5 },
            new byte[] { 0xB9, 0x48, 0x3B, 0x21, 0x04, 0x57, 0x17, 0x10, 0x04, 0xE1, 0xDC, 0x64, 0x88, 0x4D, 0xFA, 0xD9, 0x5C, 0x10, 0x7C, 0x8F, 0xCA, 0xAB, 0x76, 0xEA, 0x24, 0xFF, 0x49, 0xE8, 0xAF, 0xB1, 0x4F, 0xD0, 0x73, 0x39, 0x22, 0xBC, 0x66, 0xD4, 0x9D, 0x71, 0x1C, 0x99, 0x63, 0x1F, 0x62, 0x45, 0xAC, 0x11, 0x90, 0xEF, 0x7C, 0x02, 0x2F, 0x36, 0xF5, 0x0E, 0xD2, 0x50, 0xFC, 0x05, 0x0D, 0x2F, 0x61, 0x52, 0x91, 0x0C, 0xF1, 0x4E, 0x2B, 0x3D, 0x73, 0x87, 0x72, 0x0B, 0x72, 0x31, 0x47, 0x56, 0x88, 0xDE, 0x52, 0x38, 0x57, 0xBF, 0x34, 0x4D, 0xA0, 0x3D, 0x43, 0x13, 0xEA, 0x15, 0xD8, 0x97, 0x63, 0xED, 0x38, 0x10, 0x8D, 0x56, 0x54, 0x5D, 0xE5, 0x52, 0x7C, 0xF5, 0x8F, 0x24, 0xC3, 0xC4, 0xC6, 0x7B, 0xC8, 0x1E, 0xB2, 0xD5, 0xD7, 0xA1, 0x1E, 0x44, 0x6B, 0xB4, 0x0B, 0x17, 0x53, 0x5D, 0xAF, 0xDA, 0xA7, 0x84, 0xF9, 0x37, 0xC9, 0x31, 0x8A, 0xF5, 0x52, 0x05, 0x42, 0x3F, 0xBD, 0x7B, 0x79, 0x7E, 0x4D, 0x6E, 0x4C, 0xBA, 0xE5, 0x8D, 0x15, 0x96, 0xF2, 0x48, 0xEA, 0x9F, 0x52, 0xCE, 0xFF, 0x1F, 0x45, 0xB4, 0x7C, 0x3F, 0xCB, 0x8F, 0xB2, 0x96, 0x93, 0xBD, 0x83, 0xD2, 0x5E, 0xDE, 0x87, 0xF0, 0x3B, 0x8C, 0xCA, 0xE5, 0x10, 0xF5, 0xF5, 0x1A, 0x6E, 0x62, 0x44, 0x80, 0x47, 0xEA, 0xA3, 0x83, 0x06, 0x23, 0xF9, 0x08, 0xFE, 0x3A, 0xB3, 0xBD, 0xBC, 0xB5, 0x26, 0x27, 0x09, 0x43, 0x37, 0x13, 0xC1, 0xFA, 0x64, 0xC5, 0x04, 0x19, 0x0E, 0x4F, 0xBE, 0x62, 0xD0, 0x68, 0x4A, 0x31, 0x4F, 0xA9, 0x1A, 0x00, 0xCC, 0x3B, 0xE4, 0x7E, 0xF1, 0x00, 0xD8, 0x0C, 0x28, 0x5B, 0xCF },
            new byte[] { 0x10, 0x2B, 0x2A, 0x30, 0xBF, 0x4D, 0x85, 0xDD, 0x7F, 0xEC, 0x15, 0xA9, 0x4A },
            new byte[] { 0x6A, 0x4A, 0x73, 0x8B, 0x66, 0x7D, 0x0D, 0x09, 0x77, 0xFC, 0x2E, 0x42, 0x08, 0x63, 0xEC, 0xF8, 0xF1, 0xB3, 0x80, 0xF0, 0x52, 0xA4, 0x3D, 0x19, 0x71, 0x02, 0x23, 0x3C, 0x81, 0xDF, 0x25, 0x3B, 0x34, 0x55, 0x96, 0x8E, 0x99, 0x9D, 0xF4, 0x52, 0xC0 },
            new byte[] { 0xB3, 0x2E, 0x01, 0x7D, 0x44, 0x22, 0xF0, 0x87, 0xFB, 0x62, 0x29, 0x59, 0x49, 0xC5, 0x0C, 0x59, 0x19, 0x64, 0x59, 0xD1, 0x88, 0x97, 0xD6, 0xF3, 0x0E, 0xB3, 0xCC, 0x5E, 0x5E, 0x53, 0xBE, 0x2E, 0x30, 0x4C, 0xF0, 0x0F, 0x18, 0xF4, 0xBD, 0x01, 0x4B, 0xFA, 0xE4, 0xC3, 0x11, 0xDA, 0x0B, 0xD1, 0x81, 0x3F, 0x83, 0x90, 0xF8, 0xEF, 0x7D, 0x1C, 0x57, 0x0D, 0x6E, 0x90, 0x55, 0x91, 0x28, 0xA7, 0xA3, 0xFA, 0x29, 0xFD, 0xD4, 0xFD, 0x41, 0x25, 0xA6, 0x58, 0x85, 0x8E, 0xB2, 0x12, 0xE2, 0x33, 0xA8, 0xFB, 0xDD, 0x1F, 0xCF, 0x2E, 0x36, 0x40, 0xCE, 0xD4, 0xB7, 0x0A, 0x85, 0x2C, 0xAB, 0xBA, 0xD1, 0x3C, 0x20, 0x17, 0xB1, 0x0E, 0xFD, 0x83, 0xFE, 0x5D, 0xE9, 0x9F, 0x6A, 0xEF },
            new byte[] { 0x44, 0x2B, 0x3B, 0xE8, 0x5A, 0xB4, 0x09, 0xD7, 0x75, 0xC3, 0xE8, 0x2F, 0xFF, 0x45, 0x37, 0xA0, 0x79, 0xAC, 0xCA, 0xBC, 0x75, 0xF2, 0xCA, 0x81, 0x99, 0xFD, 0x59, 0x20, 0x72, 0x44, 0x97, 0xD6, 0xDE, 0x6A, 0x73, 0xDE, 0x49, 0x44, 0x51, 0x05, 0xC8, 0x65, 0xAA, 0x53, 0xC9, 0xDF, 0xFD, 0x3E, 0xC7, 0xBD, 0x70, 0xF2, 0x9F, 0x32, 0xF3, 0x52, 0x61, 0xB9, 0x4E, 0x5C, 0x5A, 0xE8, 0x65, 0x31, 0x2C, 0x11, 0x50, 0x94, 0xD2, 0x58, 0x56, 0x35, 0x5B, 0xC5, 0xF3, 0x10, 0x47, 0x77, 0xB8, 0xBA, 0xFF, 0x1B, 0x59, 0xB4, 0xD3, 0xA4, 0x37, 0xAC, 0x77, 0x21, 0x7D, 0x90, 0xF5, 0xF5, 0xAB, 0xDF, 0xFF, 0x79, 0x26, 0xB8, 0x8E, 0x68, 0x6B, 0x6E, 0x66, 0x3A, 0x97, 0xDA, 0x3E, 0xE2, 0x0A, 0xEA, 0x01, 0x93, 0x5C, 0x3E, 0x8F, 0xB1, 0x5D, 0x87, 0xD9, 0xA4, 0x1D, 0xB1, 0xDB, 0xC6, 0x3F, 0x65, 0x19, 0x14, 0x11, 0xCE, 0x50, 0x00, 0x2B, 0x96, 0xB0, 0xEA, 0x4D, 0x99, 0x0D, 0x5D, 0x6D, 0x94, 0x16 },
            new byte[] { 0x8E, 0x62, 0x98, 0x6D, 0x50, 0x4E, 0x1B, 0x9E, 0xDE, 0xEA, 0x4B, 0xBA, 0x92, 0xA0, 0xFB, 0x31, 0xC0, 0x2A, 0xD1, 0x3B, 0x99, 0x01, 0x67, 0xC5, 0x8D, 0xA5, 0x63, 0xC4, 0x7A, 0x7C, 0x36, 0x89, 0x9A, 0x48, 0x37, 0xDD, 0xCC, 0xAC, 0xC3, 0xC3, 0xB2, 0xB1, 0x21, 0x41, 0x4B, 0xF6, 0x57, 0xAD, 0x9D, 0xDC, 0x9C, 0x42, 0xC2, 0xDB, 0xF8, 0x8D, 0xFA, 0xD3, 0xDF, 0xAB, 0xEA, 0x57, 0x24, 0x61, 0xB3, 0xC2, 0x1F, 0x49, 0x69, 0x1D, 0x64, 0x14, 0x67, 0x0E, 0x88, 0xE8, 0xDF, 0x26, 0x7A, 0x97, 0x4D, 0xB5, 0x26, 0x9E, 0xDF, 0xF4, 0xC6, 0xBE, 0x50, 0xA9, 0xE3, 0xF9, 0xCC, 0x18, 0xD8, 0x5B, 0x8C, 0xC0, 0x8D, 0x89, 0xD6, 0x0D, 0x44, 0x7F, 0x77, 0x88, 0xDB, 0xB4, 0x52, 0x10, 0xAE, 0xD3, 0x59, 0x48, 0x5D, 0x34, 0x31, 0x86, 0x81, 0xBF, 0xFB, 0x60, 0xF9, 0xBF, 0x3A, 0x6B, 0x48, 0x4E, 0x35, 0x2D, 0x5B, 0x1F, 0x99, 0xF0, 0xC0, 0x3F, 0x71, 0xA6, 0x26, 0x57, 0x19, 0x11, 0x6C, 0x3F, 0xFB, 0x10, 0xA0, 0x84, 0xBB, 0xA3, 0x2A, 0x06, 0x3E, 0xCE, 0x8D, 0x76, 0x14, 0x84, 0x45, 0x0C, 0x40, 0x8C, 0x7E, 0x25, 0xB4, 0x8F, 0x39, 0x68, 0x88, 0x1D, 0xC2, 0x8A, 0x5F, 0x29, 0xA5, 0xE9, 0xF4, 0xB9, 0xC3, 0x2A, 0xCA, 0xC3, 0x93, 0x91, 0x03, 0x54, 0xE0, 0xCB, 0x63, 0x49, 0x2B, 0xED, 0x61, 0x1A, 0x17, 0x8C, 0x92, 0x47, 0x8B, 0x6C, 0xD6, 0x37, 0xFC, 0x9D },
            new byte[] { 0x9F, 0xA7, 0x15, 0x28, 0xA3, 0x81, 0x5A, 0xC0, 0x1B, 0x41, 0x7C, 0xF9, 0xED, 0x21, 0x5F, 0xAE, 0x6E, 0x04, 0x3E, 0xF2, 0xD5, 0x29, 0x45, 0x11, 0x19, 0x56, 0xAD, 0x2E, 0x57, 0x54, 0x93, 0xC7, 0xF5, 0xB1, 0x64, 0xAD, 0xCA, 0xA3, 0xC0, 0xC7, 0xD0, 0x2C, 0x45, 0xD8, 0x9B, 0x92, 0xA5, 0x25, 0x2B, 0xBD, 0x68, 0x32, 0xBE, 0xAA, 0x0B, 0x76, 0x62, 0x03, 0x0F, 0x4C, 0xD4, 0x2C, 0x69, 0xC7, 0xAE, 0xB4, 0x04, 0x3C, 0xBD, 0xB2, 0xE3, 0xCB, 0x44, 0x76, 0x21, 0xA9, 0xE3, 0x6C, 0x76, 0x86, 0xB0, 0x87, 0x03, 0x99, 0xEC, 0x60, 0x09, 0x4B, 0xA5, 0xED, 0x4B, 0xC7, 0x93, 0x73, 0xF3, 0xA4, 0xC2, 0x7E, 0x2A, 0xE6, 0x8E, 0x69, 0x68, 0x79, 0xD9, 0x9C, 0xED, 0x47, 0x88, 0x61, 0x92, 0xF5, 0x8C, 0x88, 0x9B, 0x4C, 0x28, 0xD0, 0xDB, 0x4D, 0xAB, 0xB8, 0x96, 0xCF, 0x66, 0x1C, 0x37, 0xD1, 0x82, 0x7D, 0xE6, 0x65, 0x41, 0x8F, 0xF7, 0x47, 0x1F, 0x89, 0xBF, 0x4F, 0x72, 0xC1, 0xC2, 0x44, 0x5B, 0x55, 0x3A, 0x0B, 0xD8, 0xA6, 0x7B, 0xF2, 0xA3, 0xDD, 0x3B, 0xD5, 0xD3, 0x98, 0x12, 0xBD, 0x65, 0x1C, 0xC5, 0x0B, 0x7A, 0x2D, 0xB4, 0xFD, 0x90, 0x54, 0x2D, 0x9F, 0x10, 0x8C, 0xDA, 0xE9, 0xF6, 0x52, 0x74, 0x10, 0xE1, 0x2C, 0xF9, 0xDC, 0x01, 0xF4, 0xC1, 0x64, 0x53, 0x22, 0x73, 0x86, 0x77, 0x02, 0xE9, 0x56, 0xFC, 0xB7, 0xC9, 0x2E, 0xA1, 0x3D, 0x7A, 0x83, 0x79, 0xDC, 0xE1, 0x17, 0x02, 0x52, 0xDF, 0x81, 0x24, 0x01, 0xDC },
            new byte[] { 0x23, 0xE9, 0x09, 0x86, 0x6B, 0x4F, 0xA9, 0x6E, 0xE1, 0xA6, 0x27, 0x0E, 0xA2, 0x84, 0xEC, 0x3F, 0x88, 0x46, 0x6F, 0xA3, 0xB2, 0x75, 0x62, 0x24, 0x12, 0xAA, 0x62, 0x01, 0x43, 0xF1, 0x62, 0x75, 0x26, 0xB0, 0x32, 0x13, 0xAD, 0x42, 0xC2, 0x52, 0x94, 0x0B, 0xA2, 0xD3, 0xB4, 0xD3, 0x74, 0x7D, 0x65, 0x9F, 0xF8, 0xDE, 0x92, 0x38, 0x87, 0xAD, 0x86, 0xE5, 0x74, 0xC1, 0xED, 0xA7, 0x2B, 0xEF, 0x43, 0xB2, 0xE8, 0xF2, 0x52, 0xD9, 0x92, 0x46, 0x83, 0x1D },
            new byte[] { 0xA6, 0xD3, 0x8F, 0x6F, 0x3E, 0x35, 0xE4, 0x9C, 0xA3, 0xF8, 0x84, 0xE3, 0xEE, 0x29, 0x84, 0x8D, 0xC7, 0xCE, 0x01, 0x64, 0xEC, 0xE0, 0xB3, 0x8F, 0x02, 0xEB, 0x82, 0x2B, 0x8B, 0x0D, 0xB2, 0x5A, 0x75, 0x28, 0xE0, 0xDA, 0xF6, 0x75, 0x35, 0x8B, 0x09, 0x0B, 0x87, 0xF6, 0xBF, 0xCE, 0xF9, 0xC8, 0xCD, 0x4C, 0xCA, 0x78, 0x82, 0xB8, 0x22, 0xC6, 0x1F, 0x00, 0x6C, 0x53, 0xB2, 0xB8, 0x10, 0x95, 0x46, 0x29, 0x6E, 0xC5, 0x48, 0xA9, 0x96, 0x52, 0x98, 0x75, 0x5B, 0xE1, 0x58, 0xBC, 0xCF, 0x34, 0xF1, 0xB9, 0x5E, 0x3F, 0x43, 0x3A, 0xD8, 0xBC, 0x05, 0x1A, 0xBB, 0xF5, 0x08, 0xE2, 0xD8, 0x51, 0xFA, 0xF1, 0xB0, 0x96, 0x60, 0x34, 0x80, 0x23, 0xB5, 0x78, 0xDF, 0x0C, 0x5D, 0x41, 0x6E, 0x63, 0x30, 0x38, 0x61, 0xF8, 0x5A, 0xD1, 0x52, 0x0C, 0x50, 0xB1, 0xC0, 0x2E, 0xEE, 0xA1, 0x49, 0xB5, 0x9D, 0x0A, 0xE7, 0x66, 0x0C, 0x39, 0xD3, 0xBD, 0x39, 0x3A, 0x8A, 0xCA, 0x5A, 0xCC, 0x5E, 0xC4, 0xAC, 0x57, 0xC4, 0xD0, 0x81, 0xE0, 0xF6, 0x29, 0x9F, 0xA3, 0x45, 0xAE, 0x73, 0x52, 0x35, 0x14, 0x2E, 0x2A, 0x6F, 0x53, 0x5A, 0x07, 0x57, 0xF7, 0x64, 0xA4, 0xBF, 0x1F, 0x47, 0x88 },
            new byte[] { 0x84, 0x52, 0xFC, 0x81, 0x96, 0xDC, 0x79, 0x34, 0xBD, 0x13, 0xBE, 0xC7, 0x68, 0xF3, 0x25, 0x49, 0xE7, 0x05, 0x76, 0x9B, 0x2F, 0x5D, 0x0B, 0x69, 0xA4, 0x00, 0xCD, 0x6B, 0xDD, 0x20, 0xD7, 0xE2, 0x16, 0xF1, 0xC1, 0x5B, 0x77, 0xD0, 0x9E, 0x37, 0xB5, 0xF5, 0xB1, 0x40, 0x9C, 0x40, 0xEE, 0x03, 0x3F, 0x5A, 0xD7, 0x1A, 0xD1, 0xEC, 0x82, 0x27, 0x47, 0x92, 0xDD, 0x96, 0x0F, 0x0D, 0x57, 0x9C, 0x3B, 0xDB, 0xB0, 0x76, 0x32, 0xC9, 0xD2, 0x16, 0x66, 0x3E, 0xE6, 0x3A, 0xAB, 0xCA, 0xCD, 0x64, 0x11, 0xC9, 0x2B, 0x82, 0x49, 0xBC, 0x11, 0x2A, 0x6F, 0x99, 0x14, 0xE5, 0xF3, 0x07, 0x28, 0xA8, 0x9E, 0x15, 0x04, 0xC0, 0x90, 0x78, 0xD0, 0x76, 0x88, 0xC1, 0xB3, 0x92, 0x05, 0x47, 0x7B, 0x7C, 0xC4, 0x79, 0x84, 0x45, 0xE1, 0xD4, 0x53, 0x7F, 0xCA, 0x85, 0x06, 0x98, 0xB4, 0xEC, 0x23, 0x5E, 0x15, 0x3D, 0x9C, 0x95, 0xC6, 0x0D, 0xD4, 0x99, 0xF8, 0xB5, 0xFA, 0x87, 0x08, 0x7E, 0x24, 0x28, 0x1E, 0x98, 0x20, 0x7A, 0x83, 0xE2, 0xC6, 0xC9, 0xC2, 0x85, 0xF5, 0x0A, 0x72, 0x38, 0xC2, 0x9B, 0x9D, 0x54, 0x7C, 0xC8, 0xAB, 0xE6, 0xB6, 0xB6, 0xA4, 0xEB, 0x4D, 0x2C, 0xDA, 0xCB, 0x76, 0x4C, 0x60, 0xDE, 0x7A, 0x1C, 0xCC, 0xA9, 0xDB, 0x33, 0x77, 0xD2, 0xD3, 0x40, 0x18, 0xC9, 0x27, 0xC0, 0xF3, 0x5E, 0xEA, 0xB3, 0x01, 0x5C, 0x7C, 0x38, 0xE1, 0x6A, 0xD5, 0x98, 0x95, 0x9A, 0xEE, 0xF7, 0x0F, 0xA8, 0xA9, 0x93, 0xBD, 0xA5, 0xCF, 0xF4, 0x79, 0x49, 0x50, 0xD8, 0x12, 0x75, 0x9D, 0xDB, 0xC3, 0x8C, 0x38, 0x7B, 0xE0, 0xC2, 0x4B, 0x04, 0x61, 0x42, 0x3A, 0x61, 0xD3, 0x43, 0x9D, 0xDC, 0xE3, 0xDB, 0x31, 0x70, 0x20, 0x93, 0x03, 0x4D, 0x8F, 0xF5, 0x3A, 0xB7, 0x0B, 0xA3 },
            new byte[] { 0x6C, 0xCC, 0xFA, 0xD4, 0x08, 0x61, 0x73, 0x16, 0x4C, 0x5D, 0xA5, 0x32, 0x7A, 0x6B, 0x6D, 0x20, 0x36, 0xAB, 0x74, 0xF5, 0x37, 0x43, 0x2D, 0xBA, 0x30, 0x89, 0xEB, 0xEC, 0xEA, 0x87, 0x93, 0xF8, 0xBD, 0x1D, 0xCD, 0x95, 0xD9, 0x6E, 0x95, 0x7A, 0x70, 0xC5, 0xE4, 0x13, 0x7B, 0x61, 0x88, 0xE2, 0x21, 0xD5, 0x04, 0x0B, 0x97, 0xAE, 0xED, 0x29, 0x9E, 0x3F, 0xA4, 0x7E, 0x76, 0x86 },
            new byte[] { 0xC5, 0xC9, 0xAC, 0x74, 0x5D, 0x9D, 0xD8, 0x46, 0xC7, 0x16, 0xF9, 0x84, 0x72, 0x5E, 0x1A, 0x3F, 0xCE, 0x01, 0x09, 0xCA, 0x15, 0x83, 0x87, 0x60, 0x0F, 0x2F, 0xA4, 0xF6, 0x9A, 0xC9, 0x17, 0x04, 0xEA, 0x99, 0x1F, 0x49, 0xCE, 0xEC, 0x2A, 0x44, 0x49, 0x8E, 0x3C, 0xF5, 0x9D, 0x2A, 0x7B, 0xCA, 0x84, 0xFF, 0xD5, 0x7C, 0x6D, 0xBB, 0x16, 0x41, 0x41, 0x4B, 0x65, 0x2E, 0xF9, 0xE2, 0xAB, 0xFD, 0xFF, 0xF5, 0x99, 0xD8, 0x3F, 0xD0, 0x71, 0xE2, 0xD7, 0xC4, 0x81, 0x86, 0x46, 0x92, 0xC3, 0xE5, 0xB3, 0xDA, 0x71, 0x9B, 0xF4, 0x9A, 0x96, 0x2E, 0x83, 0xDE, 0x08, 0x82, 0x87, 0xFC, 0x4B, 0x66, 0xE2, 0x3E, 0xF5, 0xA8, 0x90, 0xA2, 0x8B, 0xB4, 0x8E, 0xF3, 0xA5, 0xA9, 0x39, 0x8F, 0xFB, 0xAE, 0x88, 0x7F, 0x7A, 0x1E, 0x70, 0x10, 0x09, 0x65, 0x5F, 0x6B, 0x55, 0x60, 0xC8, 0xEE, 0x5A, 0xDA, 0x79, 0x1B, 0xA4, 0x07, 0x9C, 0x1B, 0x54, 0x10, 0x4E, 0xBD, 0x0D, 0x00, 0xF4, 0xED, 0xF4, 0xF4, 0xE3, 0x59, 0xFA, 0x07, 0x81, 0x2C, 0xF5, 0xD2, 0x35, 0x90, 0x49, 0x25, 0x4D },
            new byte[] { 0xEC, 0x9F, 0x98, 0xCB, 0x30, 0x1E, 0xEB, 0xF3, 0x11, 0x6D, 0x2A, 0x69, 0xCF, 0xB3, 0x03, 0x09, 0x70, 0x71, 0x76, 0x61, 0x7D, 0x6E, 0xF4, 0x52, 0x58, 0x4C, 0x25, 0xD1, 0xD2, 0x0B, 0xD2, 0x2F, 0xC3, 0x24, 0xD1, 0x6D, 0x67, 0x29, 0xBD, 0xD6, 0x08, 0xEF, 0x47, 0x8C, 0xDC, 0x18, 0x5C, 0x42, 0xCE, 0x2B, 0x20, 0xD7, 0xAE, 0xEC, 0xAC, 0x7D, 0xAB, 0x46, 0x72, 0xE3, 0xF9, 0x19, 0x20, 0x05, 0x9B, 0xFA, 0xA6, 0xAB, 0xE2, 0x95, 0xA1, 0x47, 0xB4, 0x9F, 0x58, 0x8E, 0x26, 0x67, 0x75, 0x40, 0xF0, 0xE2, 0x03, 0xA6, 0xEB, 0xFA, 0x81, 0xD7, 0x78, 0x53 },
            new byte[] { 0x21, 0xB6, 0xD9, 0xDC, 0xEF, 0xCE, 0x41, 0xF1, 0xE2, 0x71, 0xB1, 0x60, 0x38, 0x8A, 0xD8, 0x23, 0x0E, 0x93, 0x1E, 0x56, 0x43, 0xD0, 0x31, 0xF3, 0x17, 0x16, 0x7A, 0x1A, 0xA0, 0x79, 0xCF, 0x33, 0x8E, 0xD3, 0x80, 0x90, 0xDA, 0xC3, 0x69, 0xBF, 0xE4, 0x75, 0x93, 0xCE, 0x3E, 0x82, 0xCA, 0x1C, 0x12, 0xD7, 0x72, 0x43, 0x59, 0xFC, 0x7E, 0x51, 0x85, 0xE6, 0xC5, 0xD9, 0x54, 0x27, 0x50, 0x68, 0xA2, 0x7D, 0xD2, 0x65, 0x0A, 0x48, 0x48, 0x4B, 0x2A, 0x5E, 0x71, 0xCD, 0x3C, 0x62, 0xB4, 0x95, 0x4B, 0x5E, 0x07, 0xC9, 0x07, 0x8B, 0xD9, 0x91, 0x54, 0x2E, 0x0B, 0xF3, 0xFD, 0x8F, 0x6B, 0xBD, 0x24, 0x2B, 0x2C, 0xC1, 0xAF, 0x65, 0x12, 0xCA, 0x8E, 0x26, 0x19, 0xFB, 0x8B, 0xB0, 0x14, 0x22, 0x31, 0x30, 0x8D, 0xF6, 0x20, 0x87, 0x60, 0x17, 0xA4, 0x40, 0x10, 0xDB, 0x3C, 0x54, 0x4E },
            new byte[] { 0xF3, 0xB4, 0xA8, 0x10, 0x36, 0xF3, 0xE5, 0xE6, 0x4C, 0x3C, 0x3A, 0xE0, 0x72, 0xDE, 0x06, 0xA3, 0x1A, 0xE9, 0xC2, 0xCC, 0x01, 0x75, 0x9D, 0x9D, 0xCA, 0x15, 0x1C, 0x6E, 0x54, 0x36, 0x8D, 0x39, 0xD8, 0x7E, 0x07, 0xD6, 0x07, 0x03, 0xEB, 0x3E, 0x4B, 0xA7, 0xA9, 0xE3, 0x4C, 0x7F, 0xA4, 0xC6, 0x3A, 0x6D, 0xC1, 0x53, 0x92, 0x81, 0x98, 0x7E, 0x17, 0x0B, 0x46, 0x21, 0xD6, 0x76, 0x92, 0x15, 0xAE, 0x01, 0x08, 0xF4, 0xD6, 0x2F, 0x9B, 0x16, 0xFD, 0x83, 0x81, 0x5A, 0xCB, 0xB9, 0x50, 0x4A, 0x70, 0x56, 0x34, 0xE7, 0x75, 0x3A, 0xA6, 0x57, 0xE5, 0x88, 0xBF, 0xFC, 0xBD, 0xCA, 0x67, 0xD5, 0x14, 0x94, 0x35, 0x4B, 0x77, 0xB0, 0xEF, 0x0A, 0xD1, 0xAB, 0x56, 0x0F, 0xFF, 0x3E, 0xB3, 0x5D, 0xBA, 0xFB, 0xB0, 0x80, 0x42, 0xAB, 0x9F, 0x74, 0x5A, 0xB1, 0x0E, 0x4D, 0x70, 0x9F, 0x58, 0x32, 0x1C, 0xAC, 0x45, 0x36, 0x84, 0x05, 0xD3, 0xBF, 0x66, 0x29, 0x15, 0xCA, 0xE4, 0x97, 0x57, 0xA6, 0xD5, 0x61, 0x41, 0xC1, 0x19, 0xE6, 0x93, 0x69, 0xF5, 0xC0, 0xF0, 0xC6, 0xA1, 0xA2, 0x9A, 0x31, 0x52, 0x23, 0xF3, 0x53, 0xF8, 0x7C, 0xD9, 0xB5, 0x28, 0xF1, 0x1A, 0x18, 0x95, 0xD4, 0x90, 0xC3, 0x59, 0x67, 0x78, 0x0F, 0x5D, 0x96, 0x19, 0x35, 0x19, 0xDB, 0x41, 0xC3, 0x14, 0x0C, 0x1D, 0xC4, 0x8F, 0xE3, 0x78, 0xC0, 0xA4, 0x03, 0xAE, 0x58, 0x87, 0x8C, 0x98, 0x28, 0xCC, 0x7A, 0xD4, 0x20, 0x30, 0x2D, 0x6C, 0x39, 0x29, 0x8A, 0xD4, 0xBB, 0x0A, 0xBD, 0x3A },
            new byte[] { 0x3B, 0x16, 0xA0, 0x1C, 0xD3, 0x55, 0x89, 0xB1, 0x5C, 0xCF, 0x1F, 0x55, 0xB9, 0x1F, 0x87, 0xD0, 0xFD, 0xF0, 0x68, 0x9E, 0x07, 0x21, 0x92, 0xE7, 0xA0, 0xE3, 0x9A, 0x04, 0x0F, 0xBC, 0xB5, 0xE6, 0xC9, 0x91, 0x1D, 0x70, 0xEC, 0x7C, 0x54, 0x76, 0xF1, 0x22, 0xC3, 0x60, 0x0E, 0x16, 0x80, 0x0A, 0x02, 0x03, 0xBD, 0x19, 0x54, 0x9B, 0x15, 0x1A, 0x84, 0xB8, 0x7B, 0xEF, 0xBB, 0x84, 0xA1, 0xA0, 0x19, 0x38, 0x8B, 0x28, 0x02, 0x17, 0xE3, 0x80, 0x9B, 0xF1, 0xAD, 0xE4, 0x5D, 0x31, 0xD9, 0x89, 0x63, 0x8F, 0x01, 0x0B, 0xFE, 0x9C, 0x92, 0x2E, 0x7C, 0x02, 0xEC, 0x34, 0x00, 0x65, 0xBB, 0x6D, 0x80, 0x22, 0x47, 0xD5, 0x8A, 0x57, 0x08, 0xEB, 0x20, 0x3C, 0x7D, 0x62, 0xEE, 0x30, 0xBC, 0x52, 0xDE, 0xF2, 0x8C, 0x2B, 0x83, 0x96, 0xA2, 0x7D, 0xA6, 0x5D, 0xAC, 0xFF, 0x2A, 0xAF, 0x80, 0x36, 0x36, 0x40, 0x64, 0x3B, 0xEA, 0x04, 0xFE, 0x0B, 0x87, 0x15, 0xEB, 0xC1, 0x1E, 0x2F, 0x40, 0x4C, 0x46, 0x99, 0x55, 0x0E, 0xD8, 0x90, 0xEA, 0xEA, 0x80, 0xC9, 0x2F, 0x2D, 0xAB, 0x09, 0xC0, 0x70, 0xBC, 0x47, 0x2C, 0xAE, 0xCC, 0x80, 0x68, 0xDA, 0xF4, 0x80, 0xA3, 0x6D, 0xAA, 0xE0, 0x5F, 0x77, 0x1D, 0x5F, 0xB8, 0x91, 0x59, 0x71, 0x5D, 0xA5, 0x56, 0x79, 0xBA, 0x20, 0xD5, 0xD1, 0x5F, 0x7E, 0x54, 0x7B, 0x04, 0xD7, 0x02, 0x91, 0x7F, 0xC5, 0x31, 0x7A, 0x1A },
            new byte[] { 0xED, 0x7C, 0x40, 0x9F, 0x6A, 0xB7, 0x0F, 0x4C, 0x50, 0x2F, 0x16, 0x4A, 0xE9, 0x87, 0x58, 0x52, 0xC6, 0x47, 0x05, 0x22, 0x20, 0x25, 0x18, 0x2F, 0xDB, 0x87, 0x74, 0x8B, 0xE0, 0xF2, 0x60, 0xDF, 0x57, 0x05, 0xB7, 0xD9, 0x38, 0x1B, 0xB6, 0x1D, 0xC1, 0x13, 0x2D, 0x25, 0x64, 0xB9, 0xEE, 0x7B, 0x39, 0x2D, 0xFF, 0xE9, 0x75, 0xF7, 0x37, 0xC8, 0x64, 0x11, 0xC4, 0xE2, 0x43, 0x83, 0x6C, 0x5D, 0xCF, 0x37, 0xF3, 0xE3, 0xCF, 0x7F, 0x19, 0xAB, 0x91, 0xE8, 0x60, 0x0D, 0xF7, 0xF2, 0xCA, 0x22, 0x99, 0xF8, 0x52, 0xB2, 0xF3, 0x77, 0x6A, 0x5F, 0xCE, 0xEF, 0x74, 0x27, 0x57, 0xD3, 0xD9, 0x3D, 0xA7 },
            new byte[] { 0x56, 0x2D, 0xC6, 0x0A, 0xAB, 0xBA, 0x13, 0x54, 0x57, 0x8C, 0x96, 0x2A, 0xD0, 0x71, 0x46, 0xA1, 0x49, 0x4A, 0x31, 0xB9, 0x6A, 0x58, 0xCD, 0x93, 0x15, 0xDF, 0x0A, 0xF2, 0x54, 0xBD, 0x0E, 0x23, 0x65, 0x27, 0x9C, 0x9D, 0x5B, 0x8E, 0x4D, 0x97, 0x9F, 0x9E, 0x1F, 0xDD, 0xC9, 0xA3, 0x1F, 0x03, 0xE0, 0xB5, 0x8A, 0x8E, 0x0C, 0xEE, 0x65, 0xFE, 0x5F, 0x32, 0xF5, 0xCC, 0xB0, 0x20, 0x00, 0x9A, 0x7D, 0x73, 0xC4, 0xA8, 0xD4, 0xA9, 0x46, 0xBA, 0xFD, 0x99, 0x19, 0xCC, 0x38, 0xEF, 0xCA, 0x71, 0xC0, 0x07, 0x11, 0x9E, 0x32, 0x7F, 0x17, 0x77, 0xC2, 0x9E, 0x3D, 0x28, 0x99, 0x81, 0xE7, 0x7F, 0x9E, 0x84, 0x5F, 0x55, 0xDF, 0x76, 0x2E, 0x37, 0x6E, 0xD0, 0x91, 0x72, 0xD5, 0x99, 0xC5, 0x6F, 0x68, 0x83, 0x0B, 0xA8, 0x0F, 0x61, 0x67, 0xFD, 0x5C, 0x4D, 0xE5, 0x36, 0x6B, 0x1D, 0x20, 0x7C, 0xB1, 0x9A, 0x2D, 0xB3, 0x8F, 0x74, 0x92, 0x49, 0xD9, 0xD9, 0x30, 0x62, 0xEE, 0xA4, 0xA1, 0x29, 0xD9, 0xCD, 0xC0, 0x16, 0x75, 0x3F, 0x6F, 0x3C, 0x1D, 0x62, 0xF9, 0x91, 0x91, 0xF7, 0xCC, 0x51, 0xB0, 0x15, 0xC0, 0x3B, 0x6B, 0x11, 0xE0, 0xF4, 0xF0, 0xC2, 0xCF, 0x35, 0x31, 0x05, 0x0F, 0xB7, 0xAB, 0xBC, 0x5C, 0x9D, 0x5D, 0x09, 0x07, 0x72, 0x2A, 0xF1, 0x96, 0x2D, 0x7A, 0x00, 0xB7, 0xE1, 0x0D, 0xDF, 0xB2, 0xD9 },
            new byte[] { 0x66, 0xBE, 0xC8, 0xED, 0xCB, 0x25, 0xB2, 0x6F, 0x39, 0x0A, 0x18, 0x53, 0x41, 0xE5, 0xD5, 0x9B, 0x2E, 0xF3, 0xA6, 0x0E, 0x4D, 0x10, 0x79, 0x7A, 0xB2, 0x79, 0xF0 },
        };
        static readonly ushort[] ExpectedAdler16 = new ushort[] {
            0x4130,
            0x5BD2,
            0x7082,
            0xDA7C,
            0xE056,
            0xCE23,
            0x06EE,
            0x2A90,
            0x5A18,
            0x614E,
            0x451F,
            0x3B33,
            0xE642,
            0xF131,
            0x55DD,
            0x7978,
            0x1221,
            0xA944,
            0x1D1D,
            0x6E2F,
            0x150D,
            0x3FE5,
            0x62B6,
            0xF2D7,
            0x00B0,
        };
        static readonly ushort[] ExpectedCrc16 = new ushort[] {
            0xCCD4,
            0x288D,
            0xBBD6,
            0x7889,
            0xFA6E,
            0x4D4C,
            0x55BA,
            0xF168,
            0x1AE6,
            0x9D5F,
            0xF01A,
            0xBF56,
            0x656B,
            0x6B9B,
            0x629B,
            0x682F,
            0xB839,
            0xCC7D,
            0x3402,
            0x0430,
            0x0008,
            0x5B60,
            0x7E44,
            0xCD1B,
            0x3487,
        };
        static readonly ushort[] ExpectedCrcCcitt = new ushort[] {
            0xE546,
            0x6F42,
            0xA8C0,
            0xD48F,
            0x20CF,
            0xAB65,
            0x7E5B,
            0x5556,
            0x4803,
            0x292D,
            0x0EB7,
            0x7C11,
            0xAB3C,
            0xC892,
            0x6371,
            0x0131,
            0xAF39,
            0x2C54,
            0x5333,
            0x20AC,
            0x4950,
            0x7279,
            0x36AF,
            0x89D8,
            0x5A2A,
        };
        static readonly uint[] ExpectedCrc32 = new uint[] {
            0x4468F884,
            0x3E46C445,
            0x3940AB60,
            0xFA52EEDA,
            0xF8051916,
            0xCF8732EA,
            0xCE3D2B17,
            0x9BD19F3A,
            0x0846CD3A,
            0x2A74C54B,
            0xCD49A93F,
            0xCAAFD2A4,
            0x2B272787,
            0xD752F6C6,
            0xAB152638,
            0x690327C1,
            0xE0EE7F01,
            0xFE07987A,
            0xD93D11F5,
            0xC0A60D0D,
            0x0A32AABA,
            0x877F446A,
            0xC84EA726,
            0xE963F3B7,
            0x94B313C3,
        };
        static readonly uint[] ExpectedFnv1A = new uint[] {
            0x6FDD4F52,
            0xCA36ACAF,
            0x9A4162D4,
            0xEE12A6D9,
            0xF8737FB4,
            0x9F9731FB,
            0x6B905AFB,
            0x90D0C569,
            0x70581647,
            0x19B8B736,
            0x92EDD3AE,
            0x673F1FFE,
            0x580266C3,
            0xCB5EA2B1,
            0xCD868602,
            0x73369F21,
            0x0AFFE987,
            0x1D1981B0,
            0xBEA7FBCA,
            0x4F8D4AF8,
            0xF1ABF536,
            0x029C6608,
            0xE2A2CB8D,
            0x08F54DCE,
            0xE0F78DFF,
        };
        static readonly uint[] ExpectedGeneralizedCrc = new uint[] {
            0x84AF31A9,
            0xF40B009E,
            0x20ADBC2C,
            0x749A5039,
            0x78919AE6,
            0xCDEC0466,
            0x433225B2,
            0xB156887B,
            0xF279DB2A,
            0xDF08DD8C,
            0xE396B426,
            0xE3F49746,
            0xED841AB2,
            0xCDACB8A3,
            0xC35E74A9,
            0xF8ACC779,
            0x6A7B0112,
            0x364160C0,
            0x0E2A9825,
            0xE114B031,
            0x4E830889,
            0xAF6DE003,
            0x90345566,
            0x2C3B695F,
            0x44B048E1,
        };
        static readonly uint[] ExpectedJenkins06 = new uint[] {
            0x79BAE5C0,
            0x78418BEB,
            0xBF354C34,
            0x833F8804,
            0x6179F6A9,
            0xDF10C827,
            0xF00B2B9F,
            0x8897B2F8,
            0x8A51B4DC,
            0x907ECA5C,
            0x6093B8E6,
            0x6CE48419,
            0xD591AEBE,
            0xD00E7434,
            0x4E54B522,
            0xD647F7E9,
            0xDD85B788,
            0xEB5B15C2,
            0xF428D814,
            0xA8C5928B,
            0xE8CCE291,
            0x795BC6CE,
            0xFAB9E268,
            0xD1C96808,
            0x2D0983FE,
        };
        static readonly uint[] ExpectedJenkins96 = new uint[] {
            0x4E3A8A95,
            0x3702E8CA,
            0x96850DA1,
            0xE26DD43F,
            0x0E0E726A,
            0xDCD2D1E8,
            0x3CECB20A,
            0xE014D735,
            0x720683F0,
            0xA4AE20CA,
            0xB862EAD5,
            0xE4370B5B,
            0xF6D46E5B,
            0x926C4AE9,
            0xAAC9A15D,
            0x11478544,
            0x5C87D361,
            0xCAD7F890,
            0x81BCE07F,
            0x41C50419,
            0x19482CBB,
            0x25D23225,
            0x83CD4AE0,
            0x6289948D,
            0x67009D95,
        };
        static readonly uint[] ExpectedOneAtATime = new uint[] {
            0x73BB4ACD,
            0x221F04F8,
            0x0A730847,
            0xA2B030DB,
            0x17127FCD,
            0x0115FC98,
            0x7CBCEDE0,
            0x11CE1DC6,
            0x52886AF4,
            0x9D1A1EDE,
            0xA6280C45,
            0x70F920D1,
            0x6D374710,
            0x96E08018,
            0xF64F9351,
            0x93C3807B,
            0xDAEB684D,
            0x01C0BA9D,
            0x8F6E3AC0,
            0x151CF580,
            0xFBDC5B7B,
            0x06CA2A84,
            0xFE5B0099,
            0x986D1C65,
            0x02038F11,
        };
        static readonly uint[] ExpectedSuperFast = new uint[] {
            0xA289C6D1,
            0x3DF1DCD6,
            0x9DB70BE5,
            0xE56B7B96,
            0x36C02AC5,
            0xE6AB59B9,
            0xF8E9A2A4,
            0x194BA196,
            0x3466B0E1,
            0x77077736,
            0xC46517ED,
            0x8A532003,
            0x7F790033,
            0x05476BDC,
            0xD4B0D2F3,
            0x4F39F726,
            0x379EDA05,
            0x1E7B89A7,
            0x21C860BD,
            0xC219F6F2,
            0xD34AA113,
            0xC77AACA7,
            0xDE252A2D,
            0x061AD379,
            0x18A47F49,
        };
        public static IEnumerable<object[]> GetChecksumAlgorithms()
        {
            yield return new object[] { "Adler16", new Adler16(), ExpectedAdler16 };
            yield return new object[] { "Crc16", new Crc16(), ExpectedCrc16 };
            yield return new object[] { "CrcCcitt", new CrcCcitt(), ExpectedCrcCcitt };
        }

        [DataTestMethod]
        [DynamicData(nameof(GetChecksumAlgorithms), DynamicDataSourceType.Method)]
        public void ChecksumAlgorithms_ShouldMatch(string name, IChecksum16 algorithm, ushort[] expected)
        {
            for (int i = 0; i < TestData.Length; i++)
            {
                Assert.AreEqual(expected[i], algorithm.Compute(TestData[i]), $"{name} mismatch at index {i}");
            }
        }

        public static IEnumerable<object[]> GetHashAlgorithms()
        {
            yield return new object[] { "Crc32", new Crc32(), ExpectedCrc32 };
            yield return new object[] { "Fnv1A", new Fnv1A(), ExpectedFnv1A };
            yield return new object[] { "GeneralizedCrc", new GeneralizedCrc(), ExpectedGeneralizedCrc };
            yield return new object[] { "Jenkins06", new Jenkins06(0), ExpectedJenkins06 };
            yield return new object[] { "Jenkins96", new Jenkins96(), ExpectedJenkins96 };
            yield return new object[] { "OneAtATime", new OneAtATime(), ExpectedOneAtATime };
            yield return new object[] { "SuperFast", new SuperFast(), ExpectedSuperFast };
        }

        [DataTestMethod]
        [DynamicData(nameof(GetHashAlgorithms), DynamicDataSourceType.Method)]
        public void HashAlgorithms_ShouldMatch(string name, IHash algorithm, uint[] expected)
        {
            for (int i = 0; i < TestData.Length; i++)
            {
                Assert.AreEqual(expected[i], algorithm.Compute(TestData[i]), $"{name} mismatch at index {i}");
            }
        }
    }
}
